-- Overview --

AnalyzeSuspend: suspend/resume timing analysis tool
       Version: 3.2
        Author: Todd Brandt <todd.e.brandt@linux.intel.com>
     Home Page: https://01.org/suspendresume

Full documentation available online
	- Getting Started:
	  https://01.org/suspendresume/documentation/getting-started

	- Command List:
	  https://01.org/suspendresume/documentation/command-list

	- Building the linux kernel (for suspend/resume testing):
	  https://01.org/suspendresume/documentation/building-linux-kernel

	- Latest version in git:
	  https://github.com/01org/suspendresume/

-- Description --

This tool is designed to assist kernel and OS developers in optimizing
their linux stack's suspend/resume time. Using a kernel image built 
with a few extra options enabled and a small patch to enable ftrace, 
the tool will execute a suspend, and will capture dmesg and ftrace
data until resume is complete. This data is transformed into a set of 
timelines and a callgraph to give a quick and detailed view of which
devices and kernel processes are taking the most time in suspend/resume.

-- Kernel Configuration --

    The following kernel build options are required for all kernels:
        CONFIG_PM_DEBUG=y
        CONFIG_PM_SLEEP_DEBUG=y
        CONFIG_FTRACE=y
        CONFIG_FUNCTION_TRACER=y
        CONFIG_FUNCTION_GRAPH_TRACER=y

        There is a patch which does this for the ubuntu raring kernel:
        (config/analyze_suspend_kconfig_ubuntu.patch)

	In kernel 3.15.0, two patches were upstreamed which enable the
        v3.0 behavior. These patches allow the tool to read all the
        data from trace events instead of from dmesg. You can enable
        this behavior on earlier kernels with these patches:

        (config/pre-3.15/enable_trace_events_suspend_resume.patch)
        (config/pre-3.15/enable_trace_events_device_pm_callback.patch)

	If you're using a kernel older than 3.15.0, the following
        additional kernel parameters are required:
        (e.g. in file /etc/default/grub)
        GRUB_CMDLINE_LINUX_DEFAULT="... initcall_debug log_buf_len=16M ..."

	If you're using a kernel older than 3.11-rc2, the following simple
		patch must be applied to enable ftrace data:
        in file: kernel/power/suspend.c
        in function: int suspend_devices_and_enter(suspend_state_t state)
        remove call to "ftrace_stop();"
        remove call to "ftrace_start();"

        There is a patch which does this for kernel v3.8.0:
        (config/pre-3.11-rc2/enable_ftrace_in_suspendresume.patch)

-- Usage --

1) First configure a kernel using the instructions from the previous
   sections. Then build, install, and boot with it.
2) open up a terminal window and execute the script:
   %> sudo analyze-suspend.py -m mem
3) wait for the system to suspend (system time stops counting at system 
   suspend so you can wait as long as you need). Then press a key to resume.

When the system comes back you'll see the script finishing up and
creating the output files in the test subdir.

It generates output files in subdirectory: suspend-mmddyy-HHMMSS
    HTML output:                    <hostname>_<mode>.html
    raw dmesg output:               <hostname>_<mode>_dmesg.txt
    raw ftrace output:              <hostname>_<mode>_ftrace.txt

View the html in firefox or chrome.

-- Android Usage --

The easiest way to execute on an android device is to run the android.sh
script on the device, then pull the ftrace log back to the host and run
analyze_suspend.py on it.

Here are the steps:

[download and install the tool on the device]
host%> wget https://raw.githubusercontent.com/01org/suspendresume/master/android.sh
host%> adb connect 192.168.1.6
host%> adb root
# push the script to a writeable location
host%> adb push android.sh /sdcard/

[check whether the tool will run on your device]
host%> adb shell
dev%> cd /sdcard
dev%> sh android.sh status
	host    : asus_t100
	kernel  : 3.14.0-i386-dirty
	modes   : freeze mem
	rtcwake : supported
	ftrace  : supported
	trace events {
	    suspend_resume: found
	    device_pm_callback_end: found
	    device_pm_callback_start: found
	}
# the above is what you see on a system that's properly patched

[execute the suspend]
# NOTE: The suspend will only work if the screen isn't timed out,
# so you have to press some keys first to wake it up b4 suspend)
dev%> sh android.sh suspend mem
------------------------------------
Suspend/Resume timing test initiated
------------------------------------
hostname   : asus_t100
kernel     : 3.14.0-i386-dirty
mode       : mem
ftrace out : /mnt/shell/emulated/0/ftrace.txt
dmesg out  : /mnt/shell/emulated/0/dmesg.txt
log file   : /mnt/shell/emulated/0/log.txt
------------------------------------
INITIALIZING FTRACE........DONE
STARTING FTRACE
SUSPEND START @ 21:24:02 (rtcwake in 10 seconds)
<adb connection will now terminate>

[retrieve the data from the device]
# I find that you have to actually kill the adb process and 
# reconnect sometimes in order for the connection to work post-suspend
host%> adb connect 192.168.1.6
# (required) get the ftrace data, this is the most important piece
host%> adb pull /sdcard/ftrace.txt
# (optional) get the dmesg data, this is for debugging
host%> adb pull /sdcard/dmesg.txt
# (optional) get the log, which just lists some test times for comparison
host%> adb pull /sdcard/log.txt

[create an output html file using analyze_suspend.py]
host%> analyze_suspend.py -ftrace ftrace.txt

You should now have an output.html with the android data, enjoy!
