#
# This is the configuration file for analyze_suspend. It contains
# all the tool arguments so that they don't have to be given on the
# command line. It also includes advanced settings for functions
# and kprobes. It is run like this
#
#    sudo ./analyze_suspend.py -config thisfile.txt
#

[Settings]

# Verbosity
# print verbose messages (default: false)
verbose: true

# Suspend Mode
# e.g. standby, mem, freeze, disk (default: mem)
mode: mem

# Automatic Wakeup
# Use rtcwake to autoresume after X seconds (default: infinity)
rtcwake: 15

# Add Logs
# add the dmesg and ftrace log to the html output (default: false)
addlogs: false

# Callgraph
# gather detailed ftrace callgraph data on all timeline events (default: false)
callgraph: false

# Callgraph Functions
# limit callgraph data to a comma delimited list of functions (default: all)
callgraphfunc: serio_reconnect_port

# Back to Back Suspend/Resume
# Run two suspend/resumes back to back (default: false)
x2: false

# Back to Back Suspend Delay
# Time delay between the two test runs in ms (default: 0 ms)
x2delay: 0

# Post Resume Time
# Time after resume completion to wait for post-resume events (default: 0 S)
postres: 15

# Minimum Device Length
# graph only devices longer than min in the timeline (default: 0.001 ms)
mindev: 0.001

# Minimum Callgraph Length
# provide callgraph data for blocks longer than min (default: 1 ms)
mincg: 1

# Suspend/Resume Gap
# insert a small visible gap between suspend and resume on the timeline (default: false)
srgap: false

# Output Directory Format
# output folder for html, ftrace, and dmesg. Use {date} and {time} for current values
output-dir: suspend-{date}-{time}-serio

# Ignore Kprobes
# Switches off the kprobes defined in this config (default: false)
ignorekprobes: false

# KProbe Color
# Designates the default color kprobe data should be graphed in (default: c2ffc2)
kprobecolor: C2FFC2

# Sync Device Color
# Designates the default color for sync devices (default: ffc2c2)
synccolor: rgba(204,204,204,0.5)


[Kprobe_x86_64]
#
# Kprobes for x86_64 Architecture
#
# This is a list of kprobes which use both symbol data and function arg data.
# The function calls are displayed on the timeline alongside the device blocks.
# The args are pulled directly from the stack using this architecture's registers
# and stack formatting. Three pieces of info are required. The function name,
# a format string, and an argument list
#
# Entry format:
#
#   function: format{arg1}_{arg2} arg1 arg2 ...
#
# function: The symbol name for the function you want to probe (required)
#
#   ex: ata_eh_recover
#
# format: The format to display the data on the timeline in. (optional)
#   Use braces to enclose the arg names in order to add them to the string:
#
#   ex: ata{port}_port_reset
# 
# arglist: A list of arguments from registers/stack addresses. (optional)
#   See https://www.kernel.org/doc/Documentation/trace/kprobetrace.txt
#
#   For x86_64: 
#     The 1st 6 function arguments go in registers %di, %si, %dx, %cx, %8, %9
#     respectively, the remaining args are pushed onto the stack. All addresses
#     are 8 bytes (void, int, etc).
#
#   ex: name=+8(%di):string
#   desc: 1st function arg is a struct address, struct member1 is an address,
#         member2 is a string. Get that string and set it to arg "name"
#
#         static int serio_reconnect_port(struct serio *serio) ...
#         struct serio {
#           void *port_data;
#           char name[32];      <------
#           ...
#
#   ex: port=+36(%di):s32
#   desc: 1st function arg is a struct address, 36 bytes in is a 32bit short,
#         get that number and set it to arg "port"
#
#         int ata_eh_recover(struct ata_port *ap, ...
#         struct ata_port {
#           struct Scsi_Host    *scsi_host;
#           struct ata_port_operations *ops;
#           spinlock_t      *lock;
#           unsigned long       flags;
#           unsigned int        pflags;
#           unsigned int        print_id;     <----------
#           ...
#
# Example: Display ATA port reset as ataN_port_reset in the timeline
#
#   ata_eh_recover: ata{port}_port_reset port=+36(%di):s32
#

serio_reconnect_port: serio_reconnect_port({phys}/{name}) name=+8(%di):string phys=+40(%di):string
serio_disconnect_port: serio_disconnect_port({phys}/{name}) name=+8(%di):string phys=+40(%di):string [color=ffc2c2]
serio_find_driver: serio_find_driver({phys}/{name}) name=+8(%di):string phys=+40(%di):string [color=ffc2c2]
#alps_rpt_cmd: alps_rpt_cmd({icmd}/{rcmd}) icmd=%si rcmd=%dx
ps2_command: ps2_command_{name}({cmd}) cmd=%dx name=+8(+0(%di)):string [color=c2c2ff]

[Kprobe]
#
# Kprobes (arch-independent)
#
# This is a list of kprobes which use only symbol data. The function name is
# all that's required, but it can be displayed as another string on the timeline
# using the format field
#
# Entry format:
#
#   function: format
#
# Example:
# 
#   ata_eh_recover: ata_port_reset
#

serio_handle_event:
serio_suspend:
psmouse_connect:
cortron_detect:
intellimouse_detect:
im_explorer_detect:
genius_detect:
thinking_detect:
ps2bare_detect:
synaptics_detect:
focaltech_detect:
alps_detect:
elantech_detect:
lifebook_detect:
fsp_detect:
trackpoint_detect:
touchkit_ps2_detect:
cypress_detect:
